!function(r,s){"use strict";s.transparentProgressbar=r.module("crip.transparent-progressbar",[])}(angular,window.crip||(window.crip={})),function(r,s){"use strict";function i(s,i){function n(n,t,e,a){function o(r,s){c.css("width",100-r+"%")}t.addClass("crip-transparent-progressbar"),s.debug("crip",n);var c=r.element(i[0].createElement("span"));c.addClass("crip-progressbar"),c.css({bottom:0,display:"block",position:"absolute",right:0,top:0,width:"100%"}),-1!=["static","initial","inherit"].indexOf(t.css("position"))&&t.css("position","relative"),-1!=["inline"].indexOf(t.css("display"))&&t.css("display","inline-block"),t.append(c),n.$watch("progress",o)}return{restrict:"A",link:n,scope:{progress:"=cripProgressbar"}}}s.transparentProgressbar.directive("cripProgressbar",i),i.$inject=["$log","$document"]}(angular,window.crip);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvdHJhbnNwYXJlbnQtcHJvZ3Jlc3NiYXIubW9kdWxlLmpzIiwiL3NvdXJjZS9kaXJlY3RpdmVzL3Byb2dyZXNzYmFyLmpzIl0sIm5hbWVzIjpbIm5nIiwiY3JpcCIsInRyYW5zcGFyZW50UHJvZ3Jlc3NiYXIiLCJtb2R1bGUiLCJhbmd1bGFyIiwid2luZG93IiwiY3JpcFByb2dyZXNzYmFyIiwiJGxvZyIsIiRkb2N1bWVudCIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRyIiwiY3RybHMiLCJvblByb2dyZXNzQ2hhbmdlIiwidmFsdWUiLCJvbGQiLCIkcHJvZ3Jlc3MiLCJjc3MiLCJhZGRDbGFzcyIsImRlYnVnIiwiY3JlYXRlRWxlbWVudCIsImJvdHRvbSIsImRpc3BsYXkiLCJwb3NpdGlvbiIsInJpZ2h0IiwidG9wIiwid2lkdGgiLCJpbmRleE9mIiwiYXBwZW5kIiwiJHdhdGNoIiwicmVzdHJpY3QiLCJwcm9ncmVzcyIsImRpcmVjdGl2ZSIsIiRpbmplY3QiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsWUFFQUEsR0FBQUMsdUJBQ0FGLEVBQUFHLE9BQUEsb0NBRUFDLFFBQUFDLE9BQUFKLE9BQUFJLE9BQUFKLFVDTkEsU0FBQUQsRUFBQUMsR0FDQSxZQU9BLFNBQUFLLEdBQUFDLEVBQUFDLEdBaUJBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBaUNBLFFBQUFDLEdBQUFDLEVBQUFDLEdBQ0FDLEVBQ0FDLElBQUEsUUFBQSxJQUFBSCxFQUFBLEtBbENBSixFQUFBUSxTQUFBLGdDQUNBWixFQUFBYSxNQUFBLE9BQUFWLEVBRUEsSUFBQU8sR0FBQWpCLEVBQUFXLFFBQUFILEVBQUEsR0FBQWEsY0FBQSxRQUNBSixHQUFBRSxTQUFBLG9CQUNBRixFQUFBQyxLQUNBSSxPQUFBLEVBQ0FDLFFBQUEsUUFDQUMsU0FBQSxXQUNBQyxNQUFBLEVBQ0FDLElBQUEsRUFDQUMsTUFBQSxTQUdBLEtBQUEsU0FBQSxVQUFBLFdBQUFDLFFBQUFqQixFQUFBTyxJQUFBLGNBQ0FQLEVBQUFPLElBQUEsV0FBQSxZQUdBLEtBQUEsVUFBQVUsUUFBQWpCLEVBQUFPLElBQUEsYUFDQVAsRUFBQU8sSUFBQSxVQUFBLGdCQUdBUCxFQUFBa0IsT0FBQVosR0FFQVAsRUFBQW9CLE9BQUEsV0FBQWhCLEdBekNBLE9BQ0FpQixTQUFBLElBQ0F0QixLQUFBQSxFQUNBQyxPQUNBc0IsU0FBQSxxQkFWQS9CLEVBQUFDLHVCQUNBK0IsVUFBQSxrQkFBQTNCLEdBRUFBLEVBQUE0QixTQUFBLE9BQUEsY0EyREE5QixRQUFBQyxPQUFBSiIsImZpbGUiOiJ0cmFuc3BhcmVudC1wcm9ncmVzc2Jhci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKG5nLCBjcmlwKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgY3JpcC50cmFuc3BhcmVudFByb2dyZXNzYmFyID1cclxuICAgICAgICBuZy5tb2R1bGUoJ2NyaXAudHJhbnNwYXJlbnQtcHJvZ3Jlc3NiYXInLCBbXSk7XHJcblxyXG59KShhbmd1bGFyLCB3aW5kb3cuY3JpcCB8fCAod2luZG93LmNyaXAgPSB7fSkpOyIsIihmdW5jdGlvbiAobmcsIGNyaXApIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjcmlwLnRyYW5zcGFyZW50UHJvZ3Jlc3NiYXJcclxuICAgICAgICAuZGlyZWN0aXZlKCdjcmlwUHJvZ3Jlc3NiYXInLCBjcmlwUHJvZ3Jlc3NiYXIpO1xyXG5cclxuICAgIGNyaXBQcm9ncmVzc2Jhci4kaW5qZWN0ID0gWyckbG9nJywgJyRkb2N1bWVudCddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyaXBQcm9ncmVzc2JhcigkbG9nLCAkZG9jdW1lbnQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6ICc9Y3JpcFByb2dyZXNzYmFyJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGlyZWN0aXZlIGxpbmtcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBzY29wZVxyXG4gICAgICAgICAqIEBwYXJhbSBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIGF0dHJcclxuICAgICAgICAgKiBAcGFyYW0gY3RybHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xyXG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdjcmlwLXRyYW5zcGFyZW50LXByb2dyZXNzYmFyJyk7XHJcbiAgICAgICAgICAgICRsb2cuZGVidWcoJ2NyaXAnLCBzY29wZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHByb2dyZXNzID0gbmcuZWxlbWVudCgkZG9jdW1lbnRbMF0uY3JlYXRlRWxlbWVudCgnc3BhbicpKTtcclxuICAgICAgICAgICAgJHByb2dyZXNzLmFkZENsYXNzKCdjcmlwLXByb2dyZXNzYmFyJyk7XHJcbiAgICAgICAgICAgICRwcm9ncmVzcy5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJ2JvdHRvbSc6IDAsXHJcbiAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdibG9jaycsXHJcbiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgICAgJ3JpZ2h0JzogMCxcclxuICAgICAgICAgICAgICAgICd0b3AnOiAwLFxyXG4gICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKFsnc3RhdGljJywgJ2luaXRpYWwnLCAnaW5oZXJpdCddLmluZGV4T2YoZWxlbWVudC5jc3MoJ3Bvc2l0aW9uJykpICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKFsnaW5saW5lJ10uaW5kZXhPZihlbGVtZW50LmNzcygnZGlzcGxheScpKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKCRwcm9ncmVzcyk7XHJcblxyXG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goJ3Byb2dyZXNzJywgb25Qcm9ncmVzc0NoYW5nZSk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogUmVhY3Qgb24gcHJvZ3Jlc3MgdmFsdWUgY2hhbmdlXHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBvblByb2dyZXNzQ2hhbmdlKHZhbHVlLCBvbGQpIHtcclxuICAgICAgICAgICAgICAgICRwcm9ncmVzc1xyXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgKDEwMCAtIHZhbHVlKSArICclJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KShhbmd1bGFyLCB3aW5kb3cuY3JpcCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
